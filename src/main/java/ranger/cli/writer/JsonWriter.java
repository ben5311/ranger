package ranger.cli.writer;

import com.google.gson.Gson;
import ranger.util.GsonSerializer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.util.List;
import java.util.Objects;
import java.util.Scanner;

import static ranger.cli.Constants.EXTENSION_JSON;

/**
 * Writer designed to write multiple Objects generated by ObjectGenerator into a JSON array in JSON file
 * It can append to existing JSON file by reading the existing JSON array and writing it's objects to file again.
 */
public class JsonWriter extends OutputWriter {

    private final Gson gson;
    private final Writer writer;
    private boolean firstWrite = true;

    public JsonWriter(String filename, Charset charset) throws IOException {
        this(filename, charset, false);
    }

    public JsonWriter(String filename, Charset charset, boolean append) throws IOException {
        Objects.requireNonNull(filename);
        File file = new File(filename + EXTENSION_JSON);
        this.gson = GsonSerializer.newGsonInstance();
        if (!file.exists() && file.toPath().getParent() != null) {
            Files.createDirectories(file.toPath().getParent());
        }
        if (file.exists() && append) {
            StringBuilder sb = new StringBuilder();
            try (Scanner sc = new Scanner(file)) {  //read file to String
                while (sc.hasNextLine()) {
                    sb.append(sc.nextLine());
                    if (sc.hasNextLine()) {
                        sb.append(System.lineSeparator());
                    }
                }
            }
            String content = sb.toString();
            Object parsed = gson.fromJson(content, Object.class);
            if (!(parsed instanceof List)) {
                throw new IOException("Could not append to existing file " + file.getAbsolutePath() +
                        " because it is not correctly formatted. Please delete it first.");
            }
            List<?> previousObjects = (List<?>) parsed;
            this.writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), charset));
            this.writeObjects(previousObjects);
        } else {
            this.writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), charset));
        }
    }

    public JsonWriter(Writer writer) {
        this.gson = GsonSerializer.newGsonInstance();
        this.writer = writer;
    }

    @Override
    public synchronized JsonWriter writeObject(Object object) throws IOException {
        Objects.requireNonNull(object);
        if (firstWrite) {
            writer.write("[" + System.lineSeparator());
            writer.write(gson.toJson(object));
            firstWrite = false;
        } else {
            writer.write(',' + System.lineSeparator());
            writer.write(gson.toJson(object));
        }
        return this;
    }

    @Override
    public void flush() throws IOException {
        writer.flush();
    }

    @Override
    public void close() throws IOException {
        writer.write(System.lineSeparator() + "]");
        writer.close();
    }


}
